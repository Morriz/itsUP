[build-system]
requires = ["setuptools~=69.0", "wheel~=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "itsUP"
version = "0.1.2"
license = { text = "GPL-3.0-only" }
authors = [{ name = "Maurice Faber", email = "morriz@idiotz.nl" }]
description = "Lean, automated, poor man's infra for lightweight services running in docker."
readme = "README.md"
classifiers = [
  "Framework :: FastAPI",
  "Intended Audience :: System Administrators",
  "Programming Language :: Python :: 3.11",
  "Typing :: Typed",
  "Topic :: Software Development :: Build Tools",
]
keywords = ["github", "webhooks", "fastapi"]
dynamic = ["dependencies", "optional-dependencies"]
requires-python = ">=3.11"


[project.urls]
homepage = "https://github.com/morriz/github-webhooks"
"Source Code" = "https://github.com/morriz/github-webhooks"
"Bug Tracker" = "https://github.com/morriz/github-webhooks/issues"

[tool.black]
line-length = 120
preview = true
target-version = ["py311"]

[tool.isort]
profile = "black"

[tool.mypy]
check_untyped_defs = true
disable_error_code = ["import-untyped"]
disallow_any_generics = true
disallow_untyped_defs = true
exclude = ["^.venv/"]
files = ["**/*.py"]
follow_imports = "skip"
plugins = "pydantic.mypy"
python_version = "3.11"
strict_optional = false
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
warn_untyped_fields = true

[tool.pylint.'MESSAGES CONTROL']
# CRITICAL: import-outside-toplevel is enforced via --fail-on flag in bin/lint.sh
# ALL imports MUST be at the top of the file (see CLAUDE.md)
disable = [
  "invalid-name",
  "missing-docstring",
  "missing-module-docstring",
  "missing-timeout",
  "no-name-in-module",
  "redefined-builtin",
  "too-few-public-methods",
  "too-many-arguments",
  "unused-argument",
  "wrong-import-position",
]

[tool.pylint.'FORMAT']
max-line-length = 120

[tool.pylint.'MASTER']
extension-pkg-allow-list = ["netifaces"]

[tool.pyproject-fmt]
indent = 4
keep_full_version = false
max_supported_python = "3.13"



[tool.setuptools.dynamic]
dependencies = { file = ["requirements-prod.txt"] }
optional-dependencies = { test = { file = ["requirements-test.txt"] } }

[tool.pytest.ini_options]
testpaths = ["commands", "lib", "tests"]
norecursedirs = [
  "upstream",
  ".venv",
  ".git",
  "*.egg",
  "build",
  "dist",
  "dns",
  "proxy",
  "projects",
  "secrets",
]
python_files = ["*_test.py", "test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --tb=short"

[tool.coverage.run]
source = ["commands", "lib", "bin"]
omit = [
  "*_test.py",
  "*/tests/*",
  "*/.venv/*",
  "*/upstream/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
