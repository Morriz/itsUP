---
networks:
  proxynet:
    name: proxynet
    driver: bridge
    driver_opts:
      encrypted: 'true'

services:
  # watchtower:
  #   container_name: watchtower
  #   image: containrrr/watchtower:1.7.1
  #   networks:
  #     - traefik
  #   restart: always

  dns:
    image: alpine:latest
    container_name: dns-honeypot
    restart: unless-stopped
    networks:
      proxynet:
        ipv4_address: 172.30.0.253
    dns:
      - 1.1.1.1
    volumes:
      - /etc/localtime:/etc/localtime:ro
    command:
      - sh
      - -c
      - |
        echo "http://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories &&
        echo "http://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories &&
        apk add --no-cache dnsmasq bind-tools &&
        dnsmasq -k -q --log-queries --log-facility=- --no-hosts --no-resolv --server=127.0.0.11 --port=53 --bind-interfaces --interface=eth0 --except-interface=lo 2>&1 | while read line; do echo "$$(date +'%Y-%m-%d %H:%M:%S') $$line"; done
    healthcheck:
      test: ["CMD", "sh", "-c", "pidof dnsmasq"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  dockerproxy:
    image: wollomatic/socket-proxy:1 # see https://github.com/wollomatic/simple-traefik for reference
    container_name: dockerproxy
    # this image replaced https://github.com/Tecnativa/docker-socket-proxy as the socket proxy
    # for an example with the tecnativa proxy refer tags before 2.10
    # depends_on:
    #   - watchtower
    command:
      # with this configuration socket-proxy acts similar to the tecnativa proxy. For additional hardening
      # please refer to the documentation of the wollomatic/socket-proxy image
      - '-loglevel=info' # set to debug for far more logging
      - '-allowfrom=traefik'
      - '-listenip=0.0.0.0'
      - '-allowGET=/v1\..{1,2}/(version|containers/.*|events.*)' # this regexp allows readonly access only for requests that traefik needs
      - '-shutdowngracetime=5'
      - '-watchdoginterval=600'
      - '-stoponwatchdog'
    read_only: true
    mem_limit: 64M
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges
    user: '0:1' # replace with the uid:gid of the host owner of the docker socket
    networks:
      - default
    expose:
      - '2375'
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["NONE"]

  traefik:
    image: traefik:{{ versions.traefik }}
    container_name: traefik
    networks:
      - default
      - proxynet
    dns:
      - 172.30.0.253
    expose:
      - '8080'
      - '8443'
    ports:
      - 8080:8080/tcp
      - 8443:8443/tcp
{% for p in projects %}
  {%- for s in p.services %}
    {%- for i in s.ingress %}
      - {{ i.hostport }}:{{ i.port }}/{{ Protocol(i.protocol).value }}
    {%- endfor %}
  {%- endfor %}
{%- endfor %}
    restart: always
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ../data/acme:/etc/acme
      - ../logs:/var/log/traefik
    depends_on:
      dns:
        condition: service_healthy
      dockerproxy:
        condition: service_started
{%- if plugin_registry.crowdsec.enabled %}
  {%- set cs = plugin_registry.crowdsec %}
      crowdsec:
        condition: service_healthy

  crowdsec:
    image: crowdsecurity/crowdsec:{{ versions.crowdsec }}
    container_name: crowdsec
    restart: unless-stopped
    networks:
      - default
      - proxynet
    depends_on:
      dns:
        condition: service_healthy
    dns:
      - 172.30.0.253
    expose:
      - '8080'
      - '7422'
    environment:
      GID: ${GID-1000}
      COLLECTIONS: {{ cs.collections | join(' ') }}
      CUSTOM_HOSTNAME: crowdsec
      {%- if cs.apikey %}
      BOUNCER_KEY_TRAEFIK: {{ cs.apikey }}
      {%- endif %}
    volumes:
      - ./traefik/crowdsec/acquis.yml:/etc/crowdsec/acquis.yaml:ro
      - ../data/crowdsec:/var/lib/crowdsec/data/
      - ../logs:/var/log/traefik
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "cscli", "version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
{%- endif %}
